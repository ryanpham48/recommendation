import streamlit as st
import pandas as pd
import pickle
st.set_page_config(
    page_title="Recommender System cho Hasaki.vn",
    page_icon="‚≠ê",
    layout="wide",
    initial_sidebar_state="expanded",
)
st.markdown("""
    <style>
    body {
        background-color: #F7F8FA;
        font-family: 'Roboto', sans-serif;
    }
    .stApp {
        background-color: #FFFFFF;
        border-radius: 15px;
        padding: 10px;
    }
    .css-1aumxhk {  /* Sidebar */
        background-color: #E8F5E9;
        font-family: 'Georgia', serif;
    }
    h1, h2, h3 {
        color: #4CAF50;
        font-weight: bold;
    }
    .stDownloadButton {
        font-size: 18px;
        font-weight: bold;
        background-color: #4CAF50;
        color: white;
    }
    .st-bar-chart {
        background-color: #E3F2FD;
    }
    .stButton > button {
        font-size: 16px;
        font-weight: bold;
        color: white;
        background-color: #4CAF50;
        border-radius: 10px;
        border: none;
        padding: 10px 20px;
    }
    </style>
""", unsafe_allow_html=True)

# T√πy ch·ªânh giao di·ªán sidebar
def set_sidebar_style():
    sidebar_style = '''
    <style>
    [data-testid="stSidebar"] {
        background: linear-gradient(-225deg, #84fab0 0%, #8fd3f4 100%);
        color: white;
    }
    </style>
    '''
    st.markdown(sidebar_style, unsafe_allow_html=True)

set_sidebar_style()

# GUI
st.markdown(
    "<h1 style='color: #2f6e51; margin-bottom: 10px; text-align: center;'>DATA SCIENCE PROJECT<br>H·ªá Th·ªëng G·ª£i √ù S·∫£n Ph·∫©m</h1>",
    unsafe_allow_html=True,
)

menu = ["T·ªïng Quan", "Th·ª±c Hi·ªán & ƒê√°nh Gi√° Model", "G·ª£i √Ω theo th√¥ng tin kh√°ch h√†ng", "G·ª£i √Ω theo th√¥ng tin s·∫£n ph·∫©m"]
st.sidebar.write("""üìö **Menu**""")
choice = st.sidebar.selectbox(menu)
st.sidebar.write("""üë®üèª‚Äçüéìüë®‚Äçüîß **Th√†nh vi√™n th·ª±c hi·ªán:
                 L√Ω Qu·ªëc H·ªìng Ph√∫c & Ph·∫°m Anh V≈©** """)
image_width = 400
st.sidebar.image('phucly.png')
st.sidebar.image('vupham.jpg', width=image_width)
st.sidebar.write("üë®‚Äçüè´ #### Gi·∫£ng vi√™n h∆∞·ªõng d·∫´n: C√¥ Khu·∫•t Th√πy Ph∆∞∆°ng")
st.sidebar.image('khuat_thuy_phuong.jpg')
st.sidebar.write("""üíª #### Th·ªùi gian th·ª±c hi·ªán: 12/2024""")

if choice == 'T·ªïng Quan':
    # Giao di·ªán Streamlit
    st.subheader("Gi·ªõi Thi·ªáu Chung")
    st.image('banner-he-thong-cua-hang-hasaki-09122024.webp', use_container_width=True)
    # N·ªôi dung ph√°t bi·ªÉu b√†i to√°n
    st.write("""
    üõçÔ∏è **C√¥ng ty Hasaki mong mu·ªën x√¢y d·ª±ng m·ªôt h·ªá th·ªëng ƒë·ªÅ xu·∫•t s·∫£n ph·∫©m nh·∫±m c√° nh√¢n h√≥a tr·∫£i nghi·ªám ng∆∞·ªùi d√πng, gi√∫p kh√°ch h√†ng d·ªÖ d√†ng t√¨m ki·∫øm v√† l·ª±a ch·ªçn s·∫£n ph·∫©m ph√π h·ª£p v·ªõi s·ªü th√≠ch v√† nhu c·∫ßu c·ªßa h·ªç. 
    H·ªá th·ªëng n√†y s·∫Ω ph√¢n t√≠ch d·ªØ li·ªáu v·ªÅ s·∫£n ph·∫©m v√† h√†nh vi c·ªßa ng∆∞·ªùi d√πng ƒë·ªÉ ƒë∆∞a ra c√°c g·ª£i √Ω hi·ªáu qu·∫£, tƒÉng c∆∞·ªùng s·ª± h√†i l√≤ng c·ªßa kh√°ch h√†ng v√† th√∫c ƒë·∫©y doanh s·ªë b√°n h√†ng.**

    **C·ª• th·ªÉ, m·ª•c ti√™u ƒë·∫∑t ra l√†:**
    1. üíÑ V·ªõi kh√°ch h√†ng ƒë√£ c√≥ l·ªãch s·ª≠ mua s·∫Øm ho·∫∑c t∆∞∆°ng t√°c: h·ªá th·ªëng c·∫ßn d·ª±a tr√™n th√¥ng tin mua s·∫Øm v√† n·ªôi dung ƒë√°nh gi√° c·ªßa nh·ªØng ng∆∞·ªùi d√πng kh√°c c√≥ s·ªü th√≠ch t∆∞∆°ng t·ª± ƒë·ªÉ ƒë∆∞a ra g·ª£i √Ω ch√≠nh x√°c h∆°n.
    2. üí° V·ªõi kh√°ch h√†ng m·ªõi (ch∆∞a c√≥ nhi·ªÅu t∆∞∆°ng t√°c v·ªõi h·ªá th·ªëng), h·ªá th·ªëng c·∫ßn s·ª≠ d·ª•ng th√¥ng tin v·ªÅ s·∫£n ph·∫©m ƒë·ªÉ ƒë·ªÅ xu·∫•t c√°c s·∫£n ph·∫©m t∆∞∆°ng t·ª±.
    """)
    st.image('hasaki.product.png', use_container_width=True)

elif choice == 'Th·ª±c Hi·ªán & ƒê√°nh Gi√° Model':
    # Giao di·ªán Streamlit
    st.subheader("Model Evaluation")
    st.image('Hasaki.logo.wide.jpg', use_container_width=True)
    st.write("""
        Quy tr√¨nh x√¢y d·ª±ng h·ªá th·ªëng g·ª£i √Ω t·∫°i Hasaki.vn ƒë∆∞·ª£c chia th√†nh hai ph∆∞∆°ng ph√°p ch√≠nh: **Content-Based Filtering** & **Collaborative Filtering**
    """)
    # N·ªôi dung ph∆∞∆°ng ph√°p gi·∫£i quy·∫øt b√†i to√°n
    tab1, tab2 = st.tabs(["Content-Based Filtering", "Collaborative Filtering"])
    # Tab Content-Based Filtering
    with tab1:
        # Streamlit layout
        st.subheader("Content-Based Filtering: Quy tr√¨nh x√¢y d·ª±ng v√† ph√¢n t√≠ch")
        st.markdown("""
        > * Nguy√™n l√Ω: Ph√¢n t√≠ch th√¥ng tin v·ªÅ s·∫£n ph·∫©m (nh∆∞ th√†nh ph·∫ßn, c√¥ng d·ª•ng, lo·∫°i da ph√π h·ª£p, gi√° c·∫£, v.v.) ƒë·ªÉ t√¨m c√°c s·∫£n ph·∫©m t∆∞∆°ng t·ª± d·ª±a tr√™n ƒë·∫∑c tr∆∞ng c·ªßa ch√∫ng.  
        > * Thu·∫≠t to√°n: S·ª≠ d·ª•ng thu·∫≠t to√°n Cosine Similarity """)
        # M√¥ t·∫£ ch·ªçn model
        st.markdown("""
        ƒê·ªÉ x√¢y d·ª±ng m√¥ h√¨nh Content-Based Filtering, ch√∫ng t√¥i ƒë√£ th·ª≠ nghi·ªám v√† so s√°nh gi·ªØa hai ph∆∞∆°ng ph√°p ch√≠nh:
        1. **Gensim (TF-IDF):** 
            - T·∫°o t·ª´ ƒëi·ªÉn (Dictionary)
            - Chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n sang Bag-of-Words (BoW)
            - T√≠nh to√°n TF-IDF ƒë·ªÉ vector h√≥a n·ªôi dung m√¥ t·∫£.
            - T√≠nh to√°n ƒë·ªô t∆∞∆°ng ƒë·ªìng gi·ªØa c√°c t√†i li·ªáu d·ª±a tr√™n ma tr·∫≠n sparse

        2. **Cosine Similarity:**
            - Vector h√≥a m√¥ t·∫£ s·∫£n ph·∫©m b·∫±ng Bag-of-Words (BOW).
            - T√≠nh to√°n m·ª©c ƒë·ªô t∆∞∆°ng t·ª± gi·ªØa c√°c s·∫£n ph·∫©m b·∫±ng Cosine Similarity.
            - T√≠nh to√°n TF-IDF
            - L·ªçc v√† s·∫Øp x·∫øp k·∫øt qu·∫£

        """)
        st.write("### ƒê√°nh gi√° gi·ªØa c√°c ph∆∞∆°ng ph√°p")
        st.markdown("""
        **L·ª±a ch·ªçn:** D·ª±a tr√™n ƒë√°nh gi√° ==> ch·ªçn **Consine**.""")
        st.image('MRR.png', use_container_width=True)
        st.markdown("""
        | **Model**             | **Consine Similarity (Scikit-learn)**                                                         | **Gensim**                                                                     |
        |-----------------------|-----------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------|
        | **Hi·ªáu su·∫•t**         |   - ƒê·ªô bao ph·ªß v√† ƒëa d·∫°ng s·∫£n ph·∫©m g·ª£i √Ω t·ªët h∆°n Gensim.                                      | - ƒê·ªô ƒëa d·∫°ng g·ª£i √Ω th·∫•p, Y√™u c·∫ßu ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu t·ªët ƒë·ªÉ ƒë·∫°t hi·ªáu qu·∫£.       |
        | **C√°ch Tri·ªÉn Khai**   |   - ƒê∆°n gi·∫£n, tr·ª±c ti·∫øp b·∫±ng Scikit-learn                                                     | - Y√™u c·∫ßu th√™m b∆∞·ªõc chu·∫©n b·ªã d·ªØ li·ªáu (t·ª´ ƒëi·ªÉn, BoW)                            | 
        | **Th·ªùi Gian**         |   - Nhanh h∆°n v√† ph√π h·ª£p tr√™n t·∫≠p d·ªØ li·ªáu nh·ªè ho·∫∑c trung b√¨nh (<10,000 s·∫£n ph·∫©m).             | - T·ªëi ∆∞u cho d·ªØ li·ªáu l·ªõn, s·ª≠ d·ª•ng ma tr·∫≠n th∆∞a (sparse matrix)                 |
        """)

        # Tab Collaborative Filtering
        with tab2:
            # Ti√™u ƒë·ªÅ
            st.subheader("Collaborative Filtering: Quy tr√¨nh x√¢y d·ª±ng v√† ph√¢n t√≠ch")          
            st.markdown("""
            > * Nguy√™n l√Ω: D·ª±a v√†o h√†nh vi ng∆∞·ªùi d√πng (l·ªãch s·ª≠ mua s·∫Øm v√† n·ªôi dung ƒë√°nh gi√°), t√¨m ki·∫øm c√°c kh√°ch h√†ng c√≥ h√†nh vi mua s·∫Øm ho·∫∑c ƒë√°nh gi√° t∆∞∆°ng t·ª± ƒë·ªÉ t√¨m ra nh·ªØng m·ªëi li√™n h·ªá ti·ªÅm ·∫©n gi·ªØa kh√°ch h√†ng v√† s·∫£n ph·∫©m m√† Content-Based Filtering kh√¥ng th·ªÉ, ƒë·ªÉ ƒë·ªÅ xu·∫•t s·∫£n ph·∫©m ph√π h·ª£p cho ng∆∞·ªùi d√πng.  
            > * Thu·∫≠t to√°n: S·ª≠ d·ª•ng c√°c m√¥ h√¨nh t·ª´ th∆∞ vi·ªán Surprise ƒë·ªÉ d·ª± ƒëo√°n ƒëi·ªÉm ƒë√°nh gi√° s·∫£n ph·∫©m cho ng∆∞·ªùi d√πng.""")
            st.image('RMSE&MAE.png', use_container_width=True)
            st.markdown(""" Ch·ªçn s·ª≠ d·ª•ng **KNNBaseline**, v√¨ thu·∫≠t to√°n n√†y kh√¥ng ch·ªâ ƒë·∫°t hi·ªáu qu·∫£ cao m√† c√≤n ph√π h·ª£p v·ªõi d·ªØ li·ªáu c·ªßa Hasaki.
            """)
            st.markdown("""
            ƒê·ªÉ ƒë∆∞a ra quy·∫øt ƒë·ªãnh gi·ªØa **ALS** v√† **Surprise**, ch√∫ng t√¥i so s√°nh d·ª±a c√°c ti√™u ch√≠:

            | **Ti√™u ch√≠**        | **ALS**                                     | **Surprise**                             |
            |----------------------|--------------------------------------------|------------------------------------------|
            | **M·ª•c ƒë√≠ch**        | Ph√¢n t√≠ch ma tr·∫≠n, t·ªëi ∆∞u cho d·ªØ li·ªáu l·ªõn.  | Th·ª≠ nghi·ªám nhanh c√°c thu·∫≠t to√°n g·ª£i √Ω.   |
            | **Hi·ªáu su·∫•t**       | Ph√π h·ª£p h∆°n tr√™n d·ªØ li·ªáu l·ªõn, th∆∞a.         | Ph√π h·ª£p v·ªõi d·ªØ li·ªáu v·ª´a v√† nh·ªè.          |

            **K·∫øt lu·∫≠n:** V·ªõi t·∫≠p d·ªØ li·ªáu hi·ªán t·∫°i, **Surprise** l√† l·ª±a ch·ªçn t·ªëi ∆∞u h∆°n do ch·ªâ s·ªë **RMSE** th·∫•p h∆°n, v√† kh·∫£ nƒÉng tri·ªÉn khai nhanh c√°c thu·∫≠t to√°n nh∆∞ **KNNBaseline**.
            """)

elif choice == 'G·ª£i √Ω theo th√¥ng tin kh√°ch h√†ng':    
    # H√†m ƒë·ªÉ ki·ªÉm tra kh√°ch h√†ng v√† ƒë·ªÅ xu·∫•t s·∫£n ph·∫©m
    def recommend_products_for_customer(ma_khach_hang, data_sub_pandas, products_sub_pandas, best_algorithm):
        # Ki·ªÉm tra n·∫øu kh√°ch h√†ng ƒë√£ ƒë√°nh gi√° s·∫£n ph·∫©m
        df_select = data_sub_pandas[(data_sub_pandas['ma_khach_hang'] == ma_khach_hang) & (data_sub_pandas['so_sao'] >= 3)]

        if df_select.empty:
            return pd.DataFrame(), "Kh√°ch h√†ng kh√¥ng c√≥ s·∫£n ph·∫©m ƒë√£ ƒë√°nh gi√° >= 3."

        # D·ª± ƒëo√°n ƒëi·ªÉm cho c√°c s·∫£n ph·∫©m ch∆∞a ƒë√°nh gi√°
        df_score = pd.DataFrame(data_sub_pandas['ma_san_pham'].unique(), columns=['ma_san_pham'])
        df_score['EstimateScore'] = df_score['ma_san_pham'].apply(
            lambda x: best_algorithm.predict(ma_khach_hang, x).est
        )

        # L·∫•y top 5 s·∫£n ph·∫©m d·ª±a tr√™n EstimateScore
        top_5_df = df_score.sort_values(by=['EstimateScore'], ascending=False).head(5)
        top_5_df['ma_khach_hang'] = ma_khach_hang

        # K·∫øt h·ª£p v·ªõi th√¥ng tin s·∫£n ph·∫©m t·ª´ products_sub_pandas
        enriched_top_5_df = pd.merge(
            top_5_df,
            products_sub_pandas,
            on='ma_san_pham',
            how='left'
        )
        return enriched_top_5_df, None
    # Render stars based on the rating
    def render_stars(rating):
        """
        Convert a numeric rating into a string of star icons.
        """
        full_star = "<span style='color: yellow;'>‚≠ê</span>"  
        empty_star = "<span style='color: gray;'>‚òÜ</span>"
        stars = int(round(rating))  # Round to the nearest integer
        return full_star * stars + empty_star * (5 - stars)
    
    # Hi·ªÉn th·ªã ƒë·ªÅ xu·∫•t ra b·∫£ng v·ªõi chi ti·∫øt b·ªï sung
    def display_recommended_products_1(recommend_products_for_customer, cols=5):
        for i in range(0, len(recommend_products_for_customer), cols):
            cols = st.columns(cols)
            for j, col in enumerate(cols):
                if i + j < len(recommend_products_for_customer):
                    product = recommend_products_for_customer.iloc[i + j]
                    with col:
                        # T√™n s·∫£n ph·∫©m
                        st.markdown(
                            f"<h4 style='font-size:18px; font-weight:bold; text-align:center;'>{product['ten_san_pham']}</h4>", 
                            unsafe_allow_html=True
                        )
    
                        # M√£ s·∫£n ph·∫©m
                        st.markdown(
                            f"**M√£ s·∫£n ph·∫©m:** <span style='color: #8ed9ea;'>{product.get('ma_san_pham', 'Kh√¥ng c√≥ th√¥ng tin')}</span>", 
                            unsafe_allow_html=True
                        )
    
                        # Gi√° b√°n
                        gia_ban = product.get('gia_ban', 'Kh√¥ng c√≥ th√¥ng tin')
                        gia_ban_formatted = (
                            f"{int(gia_ban):,}" 
                            if isinstance(gia_ban, (int, float)) and not pd.isnull(gia_ban) 
                            else gia_ban
                        )
                        st.markdown(
                            f"**Gi√° b√°n:** <span style='color: red; font-size: 1.2em;'>{gia_ban_formatted} ‚Ç´</span>", 
                            unsafe_allow_html=True
                        )
    
                        # ƒêi·ªÉm ƒë√°nh gi√°: using render_stars function to display stars
                        diem_trung_binh = product.get('diem_trung_binh', 0)  # Using 'diem_trung_binh' for rating
                        stars = render_stars(diem_trung_binh)
                        st.markdown(
                            f"**ƒêi·ªÉm ƒë√°nh gi√°:** {stars} <span style='font-size: 1.0em;'>({diem_trung_binh:.1f})</span>", 
                            unsafe_allow_html=True
                        )
    
                        # M√¥ t·∫£ s·∫£n ph·∫©m trong h·ªôp m·ªü r·ªông
                        expander = st.expander(f"M√¥ t·∫£")
                        product_description = product.get('mo_ta', "Kh√¥ng c√≥ m√¥ t·∫£.")
                        truncated_description = ' '.join(product_description.split()[:100]) + '...'
                        expander.write(truncated_description)
                        expander.markdown("Nh·∫•n v√†o m≈©i t√™n ƒë·ªÉ ƒë√≥ng h·ªôp text n√†y.")
                        
    # ƒê·ªçc d·ªØ li·ªáu kh√°ch h√†ng, s·∫£n ph·∫©m, v√† ƒë√°nh gi√°
    customers = pd.read_csv('Khach_hang.csv')
    products = pd.read_csv('San_pham.csv')
    reviews = pd.read_csv('Danh_gia_new.csv')

    # Giao di·ªán Streamlit
    st.subheader("H·ªá th·ªëng g·ª£i √Ω s·∫£n ph·∫©m theo th√¥ng tin kh√°ch h√†ng")

    st.image('hasaki_banner.jpg', use_container_width=True)

    # Nh·∫≠p th√¥ng tin kh√°ch h√†ng
    #ho_ten_input = st.text_input("Nh·∫≠p h·ªç v√† t√™n kh√°ch h√†ng:")
    #ma_khach_hang_input = st.text_input("Nh·∫≠p m√£ kh√°ch h√†ng:")
    # TƒÉng k√≠ch th∆∞·ªõc ch·ªØ cho nh√£n "Nh·∫≠p h·ªç v√† t√™n kh√°ch h√†ng"
    st.markdown('<p style="font-size:30px; font-weight:bold;">Nh·∫≠p h·ªç v√† t√™n kh√°ch h√†ng:</p>', unsafe_allow_html=True)
    ho_ten_input = st.text_input("ho_ten_input", key="ho_ten_input", label_visibility="hidden")

    # TƒÉng k√≠ch th∆∞·ªõc ch·ªØ cho nh√£n "Nh·∫≠p m√£ kh√°ch h√†ng"
    st.markdown('<p style="font-size:25px; font-weight:bold;">Nh·∫≠p m√£ kh√°ch h√†ng:</p>', unsafe_allow_html=True)
    ma_khach_hang_input = st.text_input("ma_khach_hang_input", key="ma_khach_hang_input", label_visibility="hidden")

    if ho_ten_input and ma_khach_hang_input:
        try:
            ma_khach_hang_input = int(ma_khach_hang_input)  # Chuy·ªÉn m√£ kh√°ch h√†ng th√†nh s·ªë nguy√™n
        except ValueError:
            st.error("M√£ kh√°ch h√†ng ph·∫£i l√† m·ªôt s·ªë nguy√™n.")
        else:
            # Ki·ªÉm tra th√¥ng tin kh√°ch h√†ng
            customer_match = customers[
                (customers['ho_ten'].str.contains(ho_ten_input, case=False, na=False)) &
                (customers['ma_khach_hang'] == ma_khach_hang_input)
            ]

            if not customer_match.empty:
                st.success(f"Th√¥ng tin kh√°ch h√†ng h·ª£p l·ªá: {ho_ten_input} (M√£: {ma_khach_hang_input})")

                # ƒê·ªçc model ƒë∆∞·ª£c l∆∞u tr·ªØ trong file best_algorithm.pkl
                with open('best_algorithm.pkl', 'rb') as f:
                    best_algorithm_new = pickle.load(f)

                # G·ª£i √Ω s·∫£n ph·∫©m
                recommendations, error = recommend_products_for_customer(
                    ma_khach_hang=ma_khach_hang_input,
                    data_sub_pandas=reviews,
                    products_sub_pandas=products,
                    best_algorithm=best_algorithm_new
                )

                if error:
                    st.warning(error)
                elif not recommendations.empty:
                    st.subheader("**C√ÅC S·∫¢N PH·∫®M G·ª¢I √ù CHO KH√ÅCH H√ÄNG:**")
                    display_recommended_products_1(recommendations, cols=5)
                else:
                    st.write("Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t.")
            else:
                st.error("Kh√¥ng t√¨m th·∫•y th√¥ng tin kh√°ch h√†ng.")
    
elif choice == 'G·ª£i √Ω theo th√¥ng tin s·∫£n ph·∫©m':
    # Nh·∫≠p t√™n s·∫£n ph·∫©m, t√¨m ki·∫øm m√£ s·∫£n ph·∫©m, v√† ƒë·ªÅ xu·∫•t c√°c s·∫£n ph·∫©m li√™n quan
    def get_products_recommendations(products, product_id, cosine_sim, nums=5):
        # T√¨m ch·ªâ m·ª•c s·∫£n ph·∫©m d·ª±a tr√™n m√£ s·∫£n ph·∫©m
        matching_indices = products.index[products['ma_san_pham'] == product_id].tolist()

        if not matching_indices:
            return pd.DataFrame()
        idx = matching_indices[0]

        # T√≠nh to√°n ƒë·ªô t∆∞∆°ng ƒë·ªìng c·ªßa s·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn v·ªõi c√°c s·∫£n ph·∫©m kh√°c
        sim_scores = list(enumerate(cosine_sim[idx]))

        # S·∫Øp x·∫øp s·∫£n ph·∫©m theo ƒë·ªô t∆∞∆°ng ƒë·ªìng
        sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

        # L·∫•y c√°c s·∫£n ph·∫©m t∆∞∆°ng t·ª± (b·ªè qua s·∫£n ph·∫©m ch√≠nh)
        sim_scores = sim_scores[1:nums + 1]

        # L·∫•y ch·ªâ s·ªë s·∫£n ph·∫©m
        product_indices = [i[0] for i in sim_scores]

        # Tr·∫£ v·ªÅ danh s√°ch s·∫£n ph·∫©m ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t
        return products.iloc[product_indices]
    
    # Render stars based on the rating
    def render_stars(rating):
        """
        Convert a numeric rating into a string of star icons.
        """
        full_star = "<span style='color: yellow;'>‚≠ê</span>"  
        empty_star = "<span style='color: gray;'>‚òÜ</span>"  
        stars = int(round(rating))  # Round to the nearest integer
        return full_star * stars + empty_star * (5 - stars)
    
    # Hi·ªÉn th·ªã ƒë·ªÅ xu·∫•t ra b·∫£ng v·ªõi chi ti·∫øt b·ªï sung
    def display_recommended_products_2(get_products_recommendations, cols=4):
        for i in range(0, len(get_products_recommendations), cols):
            cols = st.columns(cols)
            for j, col in enumerate(cols):
                if i + j < len(get_products_recommendations):
                    product = get_products_recommendations.iloc[i + j]
                    with col:
                        # T√™n s·∫£n ph·∫©m
                        st.markdown(
                            f"<h4 style='font-size:18px; font-weight:bold; text-align:center;'>{product['ten_san_pham']}</h4>", 
                            unsafe_allow_html=True
                        )
    
                        # M√£ s·∫£n ph·∫©m
                        st.markdown(
                            f"**M√£ s·∫£n ph·∫©m:** <span style='color: #8ed9ea;'>{product.get('ma_san_pham', 'Kh√¥ng c√≥ th√¥ng tin')}</span>", 
                            unsafe_allow_html=True
                        )
    
                        # Gi√° b√°n
                        gia_ban = product.get('gia_ban', 'Kh√¥ng c√≥ th√¥ng tin')
                        gia_ban_formatted = (
                            f"{int(gia_ban):,}" 
                            if isinstance(gia_ban, (int, float)) and not pd.isnull(gia_ban) 
                            else gia_ban
                        )
                        st.markdown(
                            f"**Gi√° b√°n:** <span style='color: red; font-size: 1.2em;'>{gia_ban_formatted} ‚Ç´</span>", 
                            unsafe_allow_html=True
                        )
                        # ƒêi·ªÉm ƒë√°nh gi√°: using render_stars function to display stars
                        diem_trung_binh = product.get('diem_trung_binh', 0)  # Using 'diem_trung_binh' for rating
                        stars = render_stars(diem_trung_binh)
                        st.markdown(
                            f"**ƒêi·ªÉm ƒë√°nh gi√°:** {stars} <span style='font-size: 1.0em;'>({diem_trung_binh:.1f})</span>", 
                            unsafe_allow_html=True
                        )
    
                        # M√¥ t·∫£ s·∫£n ph·∫©m trong h·ªôp m·ªü r·ªông
                        expander = st.expander(f"M√¥ t·∫£")
                        product_description = product.get('mo_ta', "Kh√¥ng c√≥ m√¥ t·∫£.")
                        truncated_description = ' '.join(product_description.split()[:100]) + '...'
                        expander.write(truncated_description)
                        expander.markdown("Nh·∫•n v√†o m≈©i t√™n ƒë·ªÉ ƒë√≥ng h·ªôp text n√†y.")
                        
    # ƒê·ªçc d·ªØ li·ªáu s·∫£n ph·∫©m
    products = pd.read_csv('San_pham.csv')

    # Open and read file to cosine_sim_new
    with open('products_cosine_sim.pkl', 'rb') as f:
        cosine_sim_new = pickle.load(f)

    # Giao di·ªán Streamlit
    st.subheader("H·ªá th·ªëng g·ª£i √Ω s·∫£n ph·∫©m theo th√¥ng tin s·∫£n ph·∫©m")

    st.image('hasaki12.12.jpg', use_container_width=True)

    # Ng∆∞·ªùi d√πng nh·∫≠p t√™n s·∫£n ph·∫©m
    st.markdown('<p style="font-size:30px; font-weight:bold;">Nh·∫≠p t√™n s·∫£n ph·∫©m ƒë·ªÉ t√¨m ki·∫øm:</p>', unsafe_allow_html=True)
    product_name_input = st.text_input("product_name_input", key="product_name_input", label_visibility="hidden")

    # Ki·ªÉm tra t√™n s·∫£n ph·∫©m
    if product_name_input:
        matching_products = products[products['ten_san_pham'].str.contains(product_name_input, case=False, na=False)]
        
        if not matching_products.empty:
            
            # Hi·ªÉn th·ªã c√°c s·∫£n ph·∫©m t√¨m ƒë∆∞·ª£c
            st.subheader("Danh m·ª•c s·∫£n ph·∫©m t√¨m ƒë∆∞·ª£c:")
            
            # Display the matching products as a DataFrame
            st.dataframe(matching_products[['ma_san_pham', 'ten_san_pham']])  # Streamlit DataFrame display
            
            # Ng∆∞·ªùi d√πng ch·ªçn s·∫£n ph·∫©m t·ª´ danh s√°ch
            selected_product = st.selectbox(
                "### Ch·ªçn s·∫£n ph·∫©m ƒë·ªÉ xem g·ª£i √Ω:",
                options=matching_products.itertuples(),
                format_func=lambda x: x.ten_san_pham)

            if selected_product:
                st.write("### B·∫°n ƒë√£ ch·ªçn:")
                st.write(f"- **T√™n:** {selected_product.ten_san_pham}")
                st.write(f"- **M√£:** {selected_product.ma_san_pham}")
                st.write(f"- **M√¥ t·∫£:** {selected_product.mo_ta[:5000]}...")

                # L·∫•y danh s√°ch s·∫£n ph·∫©m g·ª£i √Ω
                recommendations = get_products_recommendations(
                    products, selected_product.ma_san_pham, cosine_sim_new, nums=4)

                if not recommendations.empty:
                    st.subheader("**C√ÅC S·∫¢N PH·∫®M G·ª¢I √ù LI√äN QUAN:**")
                    display_recommended_products_2(recommendations, cols=4)
                else:
                    st.write("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m li√™n quan.")
        else:
            st.write("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p.")
